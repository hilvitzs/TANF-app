version: 2.1
jobs:
  test-backend:
    working_directory: ~/tdp-apps
    docker:
      - image: circleci/python:3.8
        user : root
    branches:
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose build "
      - run:
          name: "Tear Down Django API Service"
          command: "cd tdrs-backend; docker-compose down "
      - run:
          name:  "Test: Execute Python Unit Tests"
          command: "cd tdrs-backend; docker-compose run web sh -c \"pytest\""
      - run:
          name:  "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 .\""
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-backend; ./zap-scanner.sh"
  test:
    working_directory: ~/tdp-apps
    docker:
      - image: cypress/base:10
        user : root
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - restore_cache:
          name: Restore Yarn Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: 'Ensure docker exists,otherwise install it.'
          command: "./scripts/docker-check.sh"
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"     
      - run:
          name: "Install Package Dependencies"
          command: "cd tdrs-frontend; yarn"
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"
      - run:
          name: "Run Pa11y Accessibility Tests"
          command: "cd tdrs-frontend; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - run:
          name: "Run Cypress Integration Tests"
          command: "cd tdrs-frontend; yarn cy:run:ci"  
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-frontend; ./zap-scanner.sh"    
      - save_cache:
          name: Save Yarn Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn    
  build:
    working_directory: ~/tdp-apps
    docker:
      - image: circleci/python:3.8
        user : root
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - run:
          name: 'Ensure sudo is installed, otherwise install it.'
          command: "./scripts/sudo-check.sh"
      - run:
          name: 'Ensure cf cli is installed, otherwise install it.'
          command: "./scripts/cf-check.sh"
      - run:
          name: "Log Into Docker"
          command: "echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin"    
      - run:
          name:  "Build Backend Docker image"
          command: "cd tdrs-backend; docker build -t goraftdocker/tdp-backend:$CIRCLE_BRANCH . -f ./docker/Dockerfile.dev"
      - run:
          name:  "Push Backend Image to Docker Hub"
          command: "docker push goraftdocker/tdp-backend:$CIRCLE_BRANCH"
      - run:
          name:  "Build Frontend Docker image"
          command: "cd tdrs-frontend; docker build -t goraftdocker/tdp-frontend:$CIRCLE_BRANCH ."
      - run:
          name:  "Push Frontend Image to Docker Hub"
          command: "docker push goraftdocker/tdp-frontend:$CIRCLE_BRANCH"
      - run:
          name: deploy to cloud.gov
          command: |
            # If we do not specify a space, then deploy to the branch that we are on.
            # Also map certain branches to spaces.
            # This lets you have dev/staging/main branches that automatically go to the right place.
            export DOCKER_IMAGE_BACKEND="goraftdocker/tdp-backend:$CIRCLE_BRANCH"
            export DOCKER_IMAGE_FRONTEND="goraftdocker/tdp-frontend:$CIRCLE_BRANCH"
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              export CF_SPACE="tanf-prod"
              export CF_USERNAME="$CF_USERNAME_PROD"
              export CF_PASSWORD="$CF_PASSWORD_PROD"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_PROD"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_PROD"
            elif [ "$CIRCLE_BRANCH" == "staging" ] ; then
              export CF_SPACE="tanf-staging"
              export CF_USERNAME="$CF_USERNAME_STAGING"
              export CF_PASSWORD="$CF_PASSWORD_STAGING"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_STAGIN"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_STAGIN"
            elif [ "$CIRCLE_BRANCH" == "dev" ] ; then
              export CF_SPACE="tanf-dev"
              export CF_USERNAME="$CF_USERNAME_DEV"
              export CF_PASSWORD="$CF_PASSWORD_DEV"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_DEV"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_DEV"
            elif [ "$CIRCLE_BRANCH" == "sprint-pr-hotfixes" ] ; then
              export CF_SPACE="tanf-dev"
              export CF_USERNAME="$CF_USERNAME_DEV"
              export CF_PASSWORD="$CF_PASSWORD_DEV"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_DEV"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_DEV"
            else
              export CF_SPACE="$CIRCLE_BRANCH"
            fi
            if [ -z "$CF_ORG" ] ; then
              echo CF_ORG not set, aborting
              exit 1
            fi

            cf api https://api.fr.cloud.gov
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o $CF_ORG -s "$CF_SPACE"
            ./deploy-cloudgov_docker.sh $CGHOSTNAME_BACKEND $CGHOSTNAME_FRONTEND $DOCKER_IMAGE_BACKEND $DOCKER_IMAGE_FRONTEND
workflows:
  build-and-test:
    jobs:
      - build
